{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to CP Club! What is competitive programming? It is the art of intelligence. To qualify in competitions, you have to learn a programming language, Algorithms, Data Structures, and some part of Discrete / Concrete Mathematics But don't be terrified. The more challenges you take, the greater you get out of it! It takes more than few days, few months, even several years to learn all the material and master your skills. Therefore, practice is an essential part of competitive programming. Some Main Topics Programming Language and Concepts Basic Data Structures Basic Algorithms More Advanced Topics and Virtual Contests Training Plan # Category Topic Tasks(P for Practice) 1 Programming Language Variables, Expressions, Input, Output, Conditioning, Loops P 2 Programming Language Loops, Arrays, String P 3 Programming Language Functions, Structs, Reference P 4 Programming Language STL, Useful Functions P 5 Contest Tricks Techniques, Preparation for CP P 6 Algorithms Recursion P 7 Data Structures Stack, Queue P 8 Algorithms Depth First Search P 9 Algorithms Breadth First Search P 10 Algorithms Greedy P 11 Algorithms Memorization and Dynamic Programming P 12 Data Structures Tree, Binary Tree P 13 Data Structures Priority Queue and Heap P 14 Data Structures Binary Search Tree P 15 Data Structures Disjoint Set (or Union-Find) P 16 Data Structures Storing a Graph P 17 Algorithms Shortest Path P Coding Style Computer Science is a practical subject, in some ways. It does not stop at theories. Implementation is the art of coding. The code should be reasonably short to save time. But it should also be clear and understandable for debugging. Name variables with names that fit their meanings. For example, if you want to count the occurrence of an element, name the variable int cnt = 0; , and make cnt += 1 every time you find the element. Format your codes that you understand how loops and conditions build up the program. /*Good Example*/ #include <iostream> using namespace std; int main(){ int n; cin >> n; cout << n << endl; return 0; } /*Bad Example, even thought it also works*/ #include <iostream> using namespace std; int main(){int n;cin>> n; cout<<n << endl; return 0;} Helpful Sources & Books There are many helpful online sources for programming, ranging from Youtube clips, Online Lectures, Online Judges, and other websites proving information. Vjudge.net: a helpful website where I will publish question sets for training(not mandatory :-) ) Link to the Website I will publish many questions on vjudge.net and save your time from searching for problems that fit your level C++ Tutorial: on Youtube created by freeCodeCamp.org(4 hours) (Or any other videos are fine, we will go through the basic concepts again later) Link to the Video HackerRank: Have good questions to get familiar with C++ HackerRank AtCoder : Japanese online judge website, the questions in ABC(AtCoder Beginner Contests) aren't too hard and fun to solve I started practicing programming by solving ABC Task B & C on AtCoder A good spreadsheet to track the problems solved: AtCoder problems CodeForces: good questions, almost every one of them involves math, try the questions in Div.3 A, or with the tag \"1000\" or below that shows the difficulty of the problem CodeForces Also, fun competitions are held every 1 or 2 weeks Questions or Opinions This is the original plan for the club meetings. Although it seems to be a big plan, I will try to focus on only the essential topics to not get everyone stressed out. I recommend solving problems to review the topics. But it is not mandatory and don't feel uncomfortable if you don't want to. For each topic, I will post 3 ~ 5 problems relevant to the problem. They will be easy enough to solve within 3 hours at most. If you are stuck on any problem, you can check my source codes and get a hint. But copying the source codes is not suggested. Motivation For anyone learning computer science or software engineering, or who just wants to get some fun, competitive programming is the right place to go. You will realize that many software and technology are based on simple algorithms. Also, there is a competition called the Canadian Computing Competition held by the University of Waterloo every year. You can participate next year and win yourself a certificate. A chance of entering the national team and representing Canada in IOI(International Olympiad in Informatics) is also possible. Most importantly, have fun.","title":"Introduction"},{"location":"#welcome-to-cp-club","text":"","title":"Welcome to CP Club!"},{"location":"#what-is-competitive-programming","text":"It is the art of intelligence. To qualify in competitions, you have to learn a programming language, Algorithms, Data Structures, and some part of Discrete / Concrete Mathematics But don't be terrified. The more challenges you take, the greater you get out of it! It takes more than few days, few months, even several years to learn all the material and master your skills. Therefore, practice is an essential part of competitive programming.","title":"What is competitive programming?"},{"location":"#some-main-topics","text":"Programming Language and Concepts Basic Data Structures Basic Algorithms More Advanced Topics and Virtual Contests","title":"Some Main Topics"},{"location":"#training-plan","text":"# Category Topic Tasks(P for Practice) 1 Programming Language Variables, Expressions, Input, Output, Conditioning, Loops P 2 Programming Language Loops, Arrays, String P 3 Programming Language Functions, Structs, Reference P 4 Programming Language STL, Useful Functions P 5 Contest Tricks Techniques, Preparation for CP P 6 Algorithms Recursion P 7 Data Structures Stack, Queue P 8 Algorithms Depth First Search P 9 Algorithms Breadth First Search P 10 Algorithms Greedy P 11 Algorithms Memorization and Dynamic Programming P 12 Data Structures Tree, Binary Tree P 13 Data Structures Priority Queue and Heap P 14 Data Structures Binary Search Tree P 15 Data Structures Disjoint Set (or Union-Find) P 16 Data Structures Storing a Graph P 17 Algorithms Shortest Path P","title":"Training Plan"},{"location":"#coding-style","text":"Computer Science is a practical subject, in some ways. It does not stop at theories. Implementation is the art of coding. The code should be reasonably short to save time. But it should also be clear and understandable for debugging. Name variables with names that fit their meanings. For example, if you want to count the occurrence of an element, name the variable int cnt = 0; , and make cnt += 1 every time you find the element. Format your codes that you understand how loops and conditions build up the program. /*Good Example*/ #include <iostream> using namespace std; int main(){ int n; cin >> n; cout << n << endl; return 0; } /*Bad Example, even thought it also works*/ #include <iostream> using namespace std; int main(){int n;cin>> n; cout<<n << endl; return 0;}","title":"Coding Style"},{"location":"#helpful-sources-books","text":"There are many helpful online sources for programming, ranging from Youtube clips, Online Lectures, Online Judges, and other websites proving information. Vjudge.net: a helpful website where I will publish question sets for training(not mandatory :-) ) Link to the Website I will publish many questions on vjudge.net and save your time from searching for problems that fit your level C++ Tutorial: on Youtube created by freeCodeCamp.org(4 hours) (Or any other videos are fine, we will go through the basic concepts again later) Link to the Video HackerRank: Have good questions to get familiar with C++ HackerRank AtCoder : Japanese online judge website, the questions in ABC(AtCoder Beginner Contests) aren't too hard and fun to solve I started practicing programming by solving ABC Task B & C on AtCoder A good spreadsheet to track the problems solved: AtCoder problems CodeForces: good questions, almost every one of them involves math, try the questions in Div.3 A, or with the tag \"1000\" or below that shows the difficulty of the problem CodeForces Also, fun competitions are held every 1 or 2 weeks","title":"Helpful Sources &amp; Books"},{"location":"#questions-or-opinions","text":"This is the original plan for the club meetings. Although it seems to be a big plan, I will try to focus on only the essential topics to not get everyone stressed out. I recommend solving problems to review the topics. But it is not mandatory and don't feel uncomfortable if you don't want to. For each topic, I will post 3 ~ 5 problems relevant to the problem. They will be easy enough to solve within 3 hours at most. If you are stuck on any problem, you can check my source codes and get a hint. But copying the source codes is not suggested.","title":"Questions or Opinions"},{"location":"#motivation","text":"For anyone learning computer science or software engineering, or who just wants to get some fun, competitive programming is the right place to go. You will realize that many software and technology are based on simple algorithms. Also, there is a competition called the Canadian Computing Competition held by the University of Waterloo every year. You can participate next year and win yourself a certificate. A chance of entering the national team and representing Canada in IOI(International Olympiad in Informatics) is also possible. Most importantly, have fun.","title":"Motivation"},{"location":"about/","text":"About this website This website was created on 9 Mar 2021. Information posted on the website are for study purpose. Found any mistake on pages? If you find any mistake or typo on the website, feel free to email me: my email address Have fun coding!","title":"About"},{"location":"about/#about-this-website","text":"This website was created on 9 Mar 2021. Information posted on the website are for study purpose.","title":"About this website"},{"location":"about/#found-any-mistake-on-pages","text":"If you find any mistake or typo on the website, feel free to email me: my email address Have fun coding!","title":"Found any mistake on pages?"},{"location":"loop_array_string/","text":"Loop, Array, String Loops In C++, there are two ways to write loops in a program. Firstly, we can use for to create a loop for certain times #include <iostream> using namespace std; int main(){ for(int i = 0; i < 10; i ++ ) cout << i << endl; return 0; } Secondly, we can use while , when we don't know exactly how many times to loop. #include <iostream> using namespace std; int main(){ int i = 0; while(i < 10){ cout << i << endl; i ++ ; } return 0; } We can nest up the loops when we want the program to execute for multiple times: #include <iostream> using namespace std; int main(){ for(int i = 0; i < 10; i ++ ) for(int j = 0; j < 10; j ++ ) cout << i << \" \" << j << endl; return 0; } Array When we want to store multiple elements together, we can use an array #include <iostream> using namespace std; int main(){ int array[] = {1, 2, 3, 4, 5}; for(int i = 0; i < 5; i ++ ) cout << array[i] << endl; return 0; } Also, we can create 2d array the first dimension is row, the second dimension is column For example, if the array is 1 2 3 11 12 13 21 22 23 then, the number 3 is at row 0 column 2 (the index of an array starts from 0) #include <iostream> using namespace std; int main(){ int array[][] = { {1, 2, 3}, {11, 12, 13}, {21, 22, 23} }; for(int i = 0; i < 3; i ++ ){ for(int j = 0; j < 3; j ++ ){ cout << array[i][j] << \" \"; } cout << endl; } return 0; } String String is sort of like a array of characters. Similar to how we access an element in an array, we can access a char of the string using []. #include <iostream> using namespace std; int main(){ string str = \"Testing\"; cout << str[0] << endl; return 0; } In C++, string also have some functions built in. str.length() : returns the length of a string. str.substring(index, len) : returns a substring from the starting index with given length. str.substring(index) : returns a substring from the starting index to the end of the string. str.find(str2) : find out the first occurance of str2 in str. (returns string::npos, which is -1) // the program is too long","title":"Loop, Array, String"},{"location":"loop_array_string/#loop-array-string","text":"","title":"Loop, Array, String"},{"location":"loop_array_string/#loops","text":"In C++, there are two ways to write loops in a program. Firstly, we can use for to create a loop for certain times #include <iostream> using namespace std; int main(){ for(int i = 0; i < 10; i ++ ) cout << i << endl; return 0; } Secondly, we can use while , when we don't know exactly how many times to loop. #include <iostream> using namespace std; int main(){ int i = 0; while(i < 10){ cout << i << endl; i ++ ; } return 0; } We can nest up the loops when we want the program to execute for multiple times: #include <iostream> using namespace std; int main(){ for(int i = 0; i < 10; i ++ ) for(int j = 0; j < 10; j ++ ) cout << i << \" \" << j << endl; return 0; }","title":"Loops"},{"location":"loop_array_string/#array","text":"When we want to store multiple elements together, we can use an array #include <iostream> using namespace std; int main(){ int array[] = {1, 2, 3, 4, 5}; for(int i = 0; i < 5; i ++ ) cout << array[i] << endl; return 0; } Also, we can create 2d array the first dimension is row, the second dimension is column For example, if the array is 1 2 3 11 12 13 21 22 23 then, the number 3 is at row 0 column 2 (the index of an array starts from 0) #include <iostream> using namespace std; int main(){ int array[][] = { {1, 2, 3}, {11, 12, 13}, {21, 22, 23} }; for(int i = 0; i < 3; i ++ ){ for(int j = 0; j < 3; j ++ ){ cout << array[i][j] << \" \"; } cout << endl; } return 0; }","title":"Array"},{"location":"loop_array_string/#string","text":"String is sort of like a array of characters. Similar to how we access an element in an array, we can access a char of the string using []. #include <iostream> using namespace std; int main(){ string str = \"Testing\"; cout << str[0] << endl; return 0; } In C++, string also have some functions built in. str.length() : returns the length of a string. str.substring(index, len) : returns a substring from the starting index with given length. str.substring(index) : returns a substring from the starting index to the end of the string. str.find(str2) : find out the first occurance of str2 in str. (returns string::npos, which is -1) // the program is too long","title":"String"},{"location":"variable_expression/","text":"Variable, Expression, I/O, Conditioning Variable and Expression: Variables can be described as boxes which store values in them. #include <iostream> using namespace std; int main(){ int a = 15; cout << a << endl; return 0; } In C++, we can write some simple expressions. #include <iostream> using namespace std; int main(){ int a = 15; int b = 20; int c = a + b; cout << c << endl; return 0; } Input and Output In C++, we use cin and cout to read user's input and print output to the screen cin for reading input, and cout for printing output // Example 1 #include <iostream> using namespace std; int main(){ int a; cin >> a; cout << a << endl; return 0; } Conditioning: if & else In C++, we can use if and else to create logical conditioning. For example, we want to output b when a equals 10, otherwise, we output -1 We can do it through the following codes #include <iostream> using namespace std; int main(){ int a; int b = 1; cin >> a; if(a == 10) // we use '==' to represent equals in C++ cout << b << endl; else cout << -1 << endl; return 0; } There are also other types of variables: Also mind that char use single quote mark char c = 'x'; while string uses double quote mark string d = \"cp\"; endl means end of the l ine In C++, we use endl to start a new line when we are printing output #include <iostream> using namespace std; int main(){ double b = 1.5; // floating-point number char c = 'x'; // a single character string d = \"cp\"; // a string cout << b << endl << c << endl << d << endl; }","title":"Variable, Expression, I/O, Conditioning"},{"location":"variable_expression/#variable-expression-io-conditioning","text":"","title":"Variable, Expression, I/O, Conditioning"},{"location":"variable_expression/#variable-and-expression","text":"Variables can be described as boxes which store values in them. #include <iostream> using namespace std; int main(){ int a = 15; cout << a << endl; return 0; } In C++, we can write some simple expressions. #include <iostream> using namespace std; int main(){ int a = 15; int b = 20; int c = a + b; cout << c << endl; return 0; }","title":"Variable and Expression:"},{"location":"variable_expression/#input-and-output","text":"In C++, we use cin and cout to read user's input and print output to the screen cin for reading input, and cout for printing output // Example 1 #include <iostream> using namespace std; int main(){ int a; cin >> a; cout << a << endl; return 0; }","title":"Input and Output"},{"location":"variable_expression/#conditioning-if-else","text":"In C++, we can use if and else to create logical conditioning. For example, we want to output b when a equals 10, otherwise, we output -1 We can do it through the following codes #include <iostream> using namespace std; int main(){ int a; int b = 1; cin >> a; if(a == 10) // we use '==' to represent equals in C++ cout << b << endl; else cout << -1 << endl; return 0; } There are also other types of variables: Also mind that char use single quote mark char c = 'x'; while string uses double quote mark string d = \"cp\"; endl means end of the l ine In C++, we use endl to start a new line when we are printing output #include <iostream> using namespace std; int main(){ double b = 1.5; // floating-point number char c = 'x'; // a single character string d = \"cp\"; // a string cout << b << endl << c << endl << d << endl; }","title":"Conditioning: if &amp; else"}]}